1. JS is synchronous single-threaded language.

2. Execution context: 
          1. Memory: (key, functions, variable etc) | Also known as variable envvironment
          2. Code: ( code is executed | line wise | one line at a time ) | Also known as thread of execution

3. When we run JS code , execution context is created.

4. var values are stored as undefined. | in first phase | In second phase initial value is stored.

5. whole function code is copied in execution context. | when executing code of function it will create another execution context in code.

6. "return" will return the value of function. | code will execute | value of undefined is replaced in memory | after execution of function execution context which is created in code will be deleted.

7.when js code is created call stack is invoked. | all code will pe pushed inside call stack from bottom to top | first code at bottom, then second one is on top of that ....... | Like stacks in C++

8. if there are 2 functions first one will be pushed to stack then it gets executed | then it will be executed and poped out from the stack | then 2nd function will be pushed in stack and then executed and poped out and so on....... 

9. Call stack means order of execution of execution context.

10. Call stack is also known as:
            1. Execution context stack 
            2. Program stack 
            3. Control stack 
            4. Runtime stack 
            5. Machine stack


11. Hoisting:
            1. undefined is not equal to not defined.
            2. Hoisting is method in which we can call functions before declaration.
            

12. Every bowser has its own js engine.
            chrome: v8
js engine will create objects in case of browser its known as window.
js engine will always create global object.
this == window (at global level).
whenever we create global execution context "this" will be created. and at global level this will ponts to window.


13.Global space:

var x = 10 {this is in global space}
function a() {
  var x = 100  (this is not in global space)
}

in simple words, anything which is not inside function is a global space.

only global variables and functions wiill be logged into the window.

window.a == this.a == a (In global space)


14. undefined is like placeholder for variables.
          1. if memory is allocated the it will be undefined
          2. and if variable is not declared in space whether global or function then it will be not defined.
          3. undefined is not empty it is placeholder.


15. JS is loosely or weakly typed not string typed.
we can put anything in variable in js not like other languages.


16. Scope is directly dependents on lexical environment.

17. Lexical memory is local memory plus reference to lexical environment of parents.

18. let and const declarations are hoisted. (temporal dead zone)
let variable initialized/declared and then logged to console | time between this is known as temporal dead zone


19. When we try to access variable in temporal dead zone it will give us reference error.

20. JS will not run a single line of code if it sees any redeclaration of let.

21. const is same as let but it is more strict.


22. Errors:
            1. TypeError: redeclaration of const variable.
            2. ReferenceError: when we try to access variable before initialization. | or variable which is not initialized.
            3. SyntaxError: redeclaration of let.


23. Block scope:
            1. block is also known as compound statement (we can combine multiple js statements in block)
            2. block is represented by {}
            3. we can use js block so that we can use that block later where js requires only one statement.
            4. If we have same named variable outside the blcok then it is known as shadowing.


24. Shadowing:
            1. Allowed: 
                        outside: var, inside: var
                        outside: let, inside block scope: let
                        outside: var, inside block scope: let
                        outside: const, inside block scope: const
                        outside: var, inside block scope: const
            
            2. Not allowed:
                        outside: let, inside: var 
                        outside: const, inside: var 


25.  Closure:
            1. function bind together with lexical environment.
            2. function with its lexical scope. (function inside function).
            3. function along witth its lexical scope bundle is a closure.


26. We can pass function inside function.  x(function a(){})
27. we can assign function to variable. var a = function a({})
28. we can also return function rather than calling it:  
            x() instead of this we can do: return x;


29. Uses of closure:
            1. Module design pattern.
            2. Currying.
            3. Fuctions like once.
            4. memoize.
            5. maintaining state in async world.
            6. setTimeouts
            7. Iterators.
            8. helps in data hiding and encapsulation.


30. JS waits for none.

31. setTimeout takes the function, attaches timer to it and store it somewhere.


32. disadvantages of closure:
            1. over consumption of memory
            2. if not handled properly it may lead to memory leaks.
            3. Garbage collector: it freezes unused (variables) memory in browser.


33. Anonymous function: a function without name


34. Synchronous single-threaded: means js can do only one thig at a time.
due to callback functions we can use async functions.


35. remove event listeners:
 event listeners are heavy | takes lots of memory | uses closures | will be there in memory until event happens and after event happend | eg if click button is there event loistener will be active untill someone click that button and after that also | this will put a heavy load load on memory | hence we need remove event listeners.

 if we add remove event listeners all the event memory will be garbage collected.



 36. First class functions: 
            1. ability of functions to be used as values and to be ppassed as arguments is known as first class functions.
            2. we can pass functions inside functions as an arguments.


37. When function is invoked, execution context of function is created and pushed into the call stack.


38. Call stack will execute things very quickly | it does not have timer.


39. Browser >> JS engine >> Call stack >> execution context

40. Browser has: 
            1. Local Storage
            2. JS engine
            3. timer
            4. URL
            5. Can make connection to server
            6. Bluetooth
            7. Geolocation


41. Web apis:
            1. setTimeout
            2. DOM apis
            3. fetch()
            4. local storage
            5. console
            6. Location
            7. Many more
These are not part of javascript | these are part of browser. | browser gives access to js engine to use these features.

42. window is global object | we can use above features of browser in js through a keyword known as window
window.setTimeout
window.localStorage

43. we dont use window.setTimeout coz setTimeout is available globally and we can access it as it is.

44. when timer expires callback function is pushed in callback queue | and event loop check if there anything in callback queue and push it into the execution context. | and call stack executes call back function.

45. microtask queue has priority than callback queue | microtask queue will execute before callback queue.

46. first all the code is executed | then event loop will check if execution context is empty or not, if it is empty them it will check for microtask queue and callback queue | if there are tasks waiting in microtask queue and callback queue | microtask queue will be executed first as it has high priority and then callback queue is executed.

47. Callback queue | task queue:
            1. DOM
            2. setTimeout etc

48. Microtask queue:
            1. fetch()
            2. promises
            3. mutation observer
            4. etc

49. Event loop , callback queues and microtask queues are part of the browser and not JS engine.

50. All the callback functions
 which come throgh promises will go in microtask queue.

51. Mutation observer:
            keeps on checking if there is mutation in DOM tree | if there is mutation if will execute callback functions.


52. Starvation of tasks inside callback queue:
            if there is task inside microtask queue which will return another callback in microtask queue which returns another callback and so on | then there is a possibility that the tasks in callback queue will never get a chance to execute | this phenomenon is known as starvation of tasks in callback queue.


53. working of web api's in short:

    - creation of global execution context => all the code is executed first (like console) => js engine checks whether there is any callback functions (web api's) => if there are callback queue tasks they will be moved in web api's environment => after some time interval (in case of setTimeout) they will go inside callback queue => event loop will wait until global execution context becomes empty => once GEC becomes empty it will check for tasks in callback queue and move them in GEC => then all tasks are executed.

    - same for microtask queue

    - but if we have microtask queue and callback queue | microtask queue will be executed first
      microtask queue > callback queue 


54. JavaScript runtime environment:
            1. It is like a container which has all the things which are required to run js code.
            2. JS engine
            3. Set of API's : to connect to outside environment
            4. callback queue
            5. microtask queue

JS runtime environment is not possible without JS engine.


55. Node.js is used to run js code outside the browser.


56. Browser's js enginer:
            1. Microsoft edge: Chakra 
            2. Firefox: Spider monkey
            3. Chrome + deno + node.js: V8


57. We can create our own js engine by following ECMAScript standards.   

58. First JS enginer developed by JS creator. which is spiderMonkey.

59. JS engine is not a machine. | it is program which is written in some programming language | Google's v8 is build using C++.

60. JS is interpreted as well as compiled language | it behaves accordingly.

61. When first js engine is created it has a interpreter | But nowadays js engine has both interpreter and compiler.

62. JIT(Just In Time) compiled language:
  Js engine uses interpreter along with compiler which makes it JIT compiled language.